if has("gui_running")
  set number
  set spell
  set spelllang=en_us
  set guioptions-=T
  set winaltkeys=no
  set clipboard=unnamed

  "set selectmode=mouse,key 
  set mousemodel=popup 
  "set keymodel=startsel,stopsel 
  "set selection=exclusive

  if has("gui_macvim")
    set fuoptions=maxhorz,maxvert
    set guifont=Menlo\ Regular:h12
    macmenu &File.New\ Tab key=<D-T>
    macmenu &File.Open\.\.\. key=<nop>
    macmenu &Tools.Make key=<nop>
    macmenu &Edit.Find.Find\.\.\. key=<nop>
    map <d-o> <leader>o
    vmap <d-o> <leader>o
    imap <d-o> <esc><leader>o

    map <d-t> <leader>t
    vmap <d-t> <leader>t  
    imap <d-t> <esc><leader>t

    map <d-f> <leader>f
    vmap <d-f> <leader>f  
    imap <d-f> <esc><leader>f

    map <d-e> <leader>e
    vmap <d-e> <leader>e  
    imap <d-e> <esc><leader>e

    map <d-b> <leader>b
    vmap <d-b> <leader>b
    imap <d-b> <esc><leader>b

    map <d-]> <leader><]>
    map <d-[> <leader><[>
    vmap <d-]> >gv
    vmap <d-[> <gv
    imap <d-]> <esc> <leader><]>
    imap <d-[> <esc> <leader><[>

    map <d-/> <leader></>
    vmap <d-/> <leader></>  
    imap <d-/> <esc> <leader></>
    
    map <d-m-up> <leader><m-up> 
    vmap <d-m-up> <leader><m-up>   
    imap <d-m-up> <esc> <leader><m-up>

    map <d-m-down> <leader><m-down>
    vmap <d-m-down> <leader><m-down>  
    imap <d-m-down> <esc> <leader><m-down>

    map <d-m-right> <leader><m-right>
    vmap <d-m-right> <leader><m-right>  
    imap <d-m-right> <esc> <leader><m-right>
    
    map <d-m-left> <leader><m-left>
    vmap <d-m-left> <leader><m-left>
    imap <d-m-left> <leader><m-left>
  else
    let g:screen_size_restore_pos = 1
    map <M-o> <leader>o
    vmap <M-o> <leader>o
    imap <M-o> <esc><leader>o

    map <M-t> <leader>t
    vmap <M-t> <leader>t  
    imap <M-t> <esc><leader>t

    map <M-f> <leader>f
    vmap <M-f> <leader>f  
    imap <M-f> <esc><leader>f

    map <M-e> <leader>e
    vmap <M-e> <leader>e  
    imap <M-e> <esc><leader>e

    map <M-b> <leader>b
    vmap <M-b> <leader>b
    imap <M-b> <esc><leader>b

    map <M-]> <leader><]>
    map <M-[> <leader><[>
    vmap <M-]> >gv
    vmap <M-[> <gv
    imap <M-]> <esc> <leader><]>
    imap <M-[> <esc> <leader><[>

    map <M-/> <leader></>
    vmap <M-/> <leader></>  
    imap <M-/> <esc> <leader></>
    
    map <M-up> <leader><up> 
    vmap <M-up> <leader><Up>   
    imap <M-up> <esc> <leader><Up>

    map <M-down> <leader><Down>
    vmap <M-down> <leader><Down>  
    imap <M-down> <esc> <leader><Down>

    map <M-right> <leader><Right>
    vmap <M-right> <leader><Right>  
    imap <M-right> <esc> <leader><Right>
    
    map <M-left> <leader><Left>
    vmap <M-left> <leader><Left>
    imap <M-left> <esc> <leader><Left>

  endif

endif

" ConqueTerm wrapper
function StartTerm()
  execute 'ConqueTerm ' . $SHELL . ' --login'
  setlocal listchars=tab:\ \ 
endfunction

if has("gui_running") && !has("gui_macvim")
  function! ScreenFilename()
    if has('amiga')
      return "s:.vimsize"
    elseif has('win32')
      return $HOME.'\_vimsize'
    else
      return $HOME.'/.vimsize'
    endif
  endfunction

  function! ScreenRestore()
    " Restore window size (columns and lines) and position
    " from values stored in vimsize file.
    " Must set font first so columns and lines are based on font size.
    let f = ScreenFilename()
    if has("gui_running") && g:screen_size_restore_pos && filereadable(f)
      let vim_instance = (g:screen_size_by_vim_instance==1?(v:servername):'GVIM')
      for line in readfile(f)
        let sizepos = split(line)
        if len(sizepos) == 5 && sizepos[0] == vim_instance
          silent! execute "set columns=".sizepos[1]." lines=".sizepos[2]
          silent! execute "winpos ".sizepos[3]." ".sizepos[4]
          return
        endif
      endfor
    endif
  endfunction

  function! ScreenSave()
    " Save window size and position.
    if has("gui_running") && g:screen_size_restore_pos
      let vim_instance = (g:screen_size_by_vim_instance==1?(v:servername):'GVIM')
      let data = vim_instance . ' ' . &columns . ' ' . &lines . ' ' .
            \ (getwinposx()<0?0:getwinposx()) . ' ' .
            \ (getwinposy()<0?0:getwinposy())
      let f = ScreenFilename()
      if filereadable(f)
        let lines = readfile(f)
        call filter(lines, "v:val !~ '^" . vim_instance . "\\>'")
        call add(lines, data)
      else
        let lines = [data]
      endif
      call writefile(lines, f)
    endif
  endfunction

  if !exists('g:screen_size_restore_pos')
    let g:screen_size_restore_pos = 1
  endif
  if !exists('g:screen_size_by_vim_instance')
    let g:screen_size_by_vim_instance = 1
  endif
  autocmd VimEnter * if g:screen_size_restore_pos == 1 | call ScreenRestore() | endif
  autocmd VimLeavePre * if g:screen_size_restore_pos == 1 | call ScreenSave() | endif
endif
