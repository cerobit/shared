#config color on;
#config verbatim off;
#config log raw;
#config charset {UTF-8};
#config {command echo} off;
#config {command color} {<158><< <178>};
#config {debug telnet} off;

#nop --------- VARIABLES ---------

#var CLIENT_NAME unknown;
#var CLIENT_VERSION 0;
#var PLAYER_FILE  {aardwolf.player};
#var MAP_FILE     {aardwolf.map};
#var CHAT_FILE    {aardwolf.chat};
#var MINIMAP_FILE {aardwolf.minimap};
#format IAC  %a 255;
#format DONT %a 254;
#format DO   %a 253;
#format WONT %a 252;
#format WILL %a 251;
#format SB   %a 250;
#format SE   %a 240;
#format GMCP %a 201;

#format state_map
{
  {1}{login}
  {2}{motd}
  {3}{normal}
  {4}{afk}
  {5}{note}
  {6}{edit}
  {7}{pager}
  {8}{combat}
  {9}{sleeping}
  {11}{resting}
  {12}{running}
}

#var pulling_map 0;


#nop ---------- ALIASES ---------

#nop Initiate a connection with aardwolf
#alias {connect}
{
  #session {aardwolf} {aardmud.org} {4000};
}

#alias {_redraw}
{
  #format state     {%m} {0 + $gmcp[char][status][state]};
  #if {@empty{$state} || ($state == 1 || $state == 2)} {#return};
  #format name      {%s} {$gmcp[char][base][name]};
  #format tier      {%m} {0 + $gmcp[char][base][tier]};
  #format level     {%m} {0 + $gmcp[char][status][level]};
  #format class     {%s} {$gmcp[char][base][class]};
  #format subclass  {%s} {$gmcp[char][base][subclass]};
  #format perlevel  {%m} {0 + $gmcp[char][base][perlevel]};
  #format tnl       {%m} {0 + $gmcp[char][status][tnl]};
  #format hp        {%m} {0 + $gmcp[char][vitals][hp]};
  #format hp_max    {%m} {0 + $gmcp[char][maxstats][maxhp]};
  #format mana      {%m} {0 + $gmcp[char][vitals][mana]};
  #format mana_max  {%m} {0 + $gmcp[char][maxstats][maxmana]};
  #format moves     {%m} {0 + $gmcp[char][vitals][moves]};
  #format moves_max {%m} {0 + $gmcp[char][maxstats][maxmoves]};
  #format hunger    {%m} {0 + $gmcp[char][status][hunger]};
  #format thirst    {%m} {0 + $gmcp[char][status][thirst]};

  #format player {\n};

  #format player {$player <078>$name\n};
  #format player {$player <078>T$tier L$level $subclass\n};
  
  #format player {$player\n};

  #format hp_color {@color_scale{$hp;$hp_max}};
  #format hp_bar   {%-13s} {@generate_bar{@number_scale{13; $hp; $hp_max}}};
  #format player   {$player <128>HP: <ccc>[$hp_color$hp_bar<ccc>]\n};
  #format player   {$player $hp_color%+8s <ccc>/ <128>%s\n} {$hp} {$hp_max};

  #format mana_bar {%-13s} {@generate_bar{@number_scale{13; $mana; $mana_max}}};
  #format player   {$player <148>MP: <ccc>[<148>$mana_bar<ccc>]\n};
  #format player   {$player <148>%+8s <ccc>/ <148>%s\n} {$mana} {$mana_max};

  #format moves_bar {%-13s} {@generate_bar{@number_scale{13; $moves; $moves_max}}};
  #format player    {$player <158>MV: <ccc>[<158>$moves_bar<ccc>]\n};
  #format player   {$player <158>%+8s <ccc>/ <158>%s\n} {$moves} {$moves_max};

  #format player {$player\n};
  
  #math exp_cur        {$perlevel - $tnl};
  #format player       {$player <038>EX: <ccc>[<038>%-13s<ccc>]\n} {@generate_bar{@number_scale{13; $exp_cur; $perlevel}}};
  #format hunger_bar   {%-13s} {@generate_bar{@number_scale{13; $hunger; 100}}};
  #format hunger_color {@color_scale{$hunger; 100}};  
  #format player       {$player <178>HU: <ccc>[$hunger_color$hunger_bar<ccc>]\n};
  
  #format thirst_bar   {%-13s} {@generate_bar{@number_scale{13; $thirst; 100}}};
  #format thirst_color {@color_scale{$thirst; 100}};
  #format player       {$player <178>TH: <ccc>[$thirst_color$thirst_bar<ccc>]\n};

  _dump $PLAYER_FILE {$player} 1; 

  #format prompt {};
  #format prompt {$prompt <ccc>%-8s\n} {* $state_map[$state] *};

  #line ignore #showme {$prompt} {1};
}

#alias {_update_chat}
{
  #var msg {%s} {$gmcp[comm][channel][msg]};
  _dump $CHAT_FILE {$msg};
  #replace msg {\e[%Wm} {};
  #gag {$msg};
}

#nop Write data out to a file, optionally truncating
#alias {_dump}
{
  #var file {%1};
  #var data {%2};
  #var truncate {%3};
  #if {$truncate} { _truncate {$file} };
  #line log $file $data;
}

#alias {_truncate}
{
  #system {truncate -s 0 %1};
}

#nop --------- FUNCTIONS ---------

#function {empty} 
{
  #math result {%1 == ""}; 
}

#nop Utility function to generate color gradients, requires 256 color terminal.
#nop Args: 1) varient value, 2) max value
#function {color_scale}
{
  #var max %2;
  #var val @cap{%1; $max};
  #switch {10 * $val / $max}
  {
    #case {0} {#return <faa>};
    #case {1} {#return <fba>};
    #case {2} {#return <fca>};
    #case {3} {#return <fda>};
    #case {4} {#return <fea>};
    #case {5} {#return <ffa>};
    #case {6} {#return <efa>};
    #case {7} {#return <dfa>};
    #case {8} {#return <cfa>};
    #case {9} {#return <bfa>};
    #default  {#return <afa>}
  }
}

#nop Take's a scale size, current value, and a max value and returns the scale
#nop Args: 1) size of scale, 2) varient value, 3) max value
#function {number_scale}
{
  #var max %3;
  #var val @cap{%2; $max};
  #var scale %1;
  #math scaled {($scale * $val) / $max};
  #return $scaled;
}

#nop Bar generator - health bars and etc.
#function {generate_bar}
{
  #if {!%1} { #return {}};
  #format bar {};
  #loop 1 %1 cnt { #format bar {$bar#} };
  #return $bar;
}

#function {cap}
{
  #if {!%1} { #return 0};
  #if {%1 >= %2} {#return %2};
  #return %1;
}


#nop ----------- ACTIONS ----------
#action {^<MAPSTART>$}
{
  #line gag;
  #var pulling_map 1;
  _truncate $MINIMAP_FILE;
}

#action {^<MAPEND>$}
{
  #line gag;
  #var pulling_map 0;
}

#action {~%0}
{
  #if {$pulling_map}
  {
    #line log {$MINIMAP_FILE} {%0};
    #line gag;
  }
}

#nop ----------- EVENTS -----------

#event {PROGRAM START}
{
  #var CLIENT_NAME %0;
  #var CLIENT_VERSION %1;
}

#event {SESSION CONNECTED}
{
  #split 0 1;
  #map create 100000;
  #map goto 1;
  #map flag vtmap;
  #map flag static;
  #map flag nofollow;
  #map read $MAP_FILE;
  _truncate $PLAYER_FILE;
  _truncate $CHAT_FILE;
  _truncate $MINIMAP_FILE;
}

#event {SESSION DISCONNECTED}
{
  #map write $MAP_FILE;
}

#nop Negotiate GMCP and which data we wish to receive
#event {IAC WILL GMCP}
{
  #send {$IAC$DO$GMCP\};
  #send {$IAC$SB$GMCP core.hello { "client": "$CLIENT_NAME", "version": "$CLIENT_VERSION" } $IAC$SE\};
  #send {$IAC$SB$GMCP core.supports.set [ "char 1", "group 1", "room 1", "comm 1", "debug 1" ] $IAC$SE\};
}

#nop Store incoming GMCP data
#event {IAC SB GMCP char.base IAC SE}     {#var gmcp[char][base]     {%0};_redraw};
#event {IAC SB GMCP char.vitals IAC SE}   {#var gmcp[char][vitals]   {%0};_redraw};
#event {IAC SB GMCP char.stats IAC SE}    {#var gmcp[char][stats]    {%0};_redraw};
#event {IAC SB GMCP char.maxstats IAC SE} {#var gmcp[char][maxstats] {%0};_redraw};
#event {IAC SB GMCP char.status IAC SE}   {#var gmcp[char][status]   {%0};_redraw};
#event {IAC SB GMCP char.worth IAC SE}    {#var gmcp[char][worth]    {%0}};
#event {IAC SB GMCP group IAC SE}         {#var gmcp[group]          {%0}};
#event {IAC SB GMCP room.info IAC SE}     {#var gmcp[room][info]     {%0}};
#event {IAC SB GMCP comm.channel IAC SE}  {#var gmcp[comm][channel]  {%0};_update_chat};
#event {IAC SB GMCP comm.events IAC SE}   {#var gmcp[comm][events]   {%0}};
#event {IAC SB GMCP comm.tick IAC SE}     {#var gmcp[comm][tick]     {%0}};
#event {IAC SB GMCP comm.quest IAC SE}    {#var gmcp[comm][quest]    {%0}};
#event {IAC SB GMCP comm.repop IAC SE}    {#var gmcp[comm][repop]    {%0}};
